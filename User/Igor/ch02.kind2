// Definição do tipo Bool
Bool : Type
Bool.false : Bool
Bool.true  : Bool

Bool.not (b: Bool) : Bool
Bool.not Bool.false = Bool.true
Bool.not Bool.true  = Bool.false

Bool.and (b1: Bool) (b2: Bool) : Bool
Bool.and Bool.true  b = b
Bool.and Bool.false b = Bool.false

Bool.or (b1: Bool) (b2: Bool) : Bool
Bool.or Bool.true  b = Bool.true
Bool.or Bool.false b = b



// Unit tests
TestOrB1 : Equal (Bool.or Bool.true Bool.false) Bool.true
TestOrB1 = Equal.refl

TestOrB2 : Equal (Bool.or Bool.false Bool.false) Bool.false
TestOrB2 = Equal.refl

TestOrB3 : Equal (Bool.or Bool.false Bool.true) Bool.true
TestOrB3 = Equal.refl

TestOrB4 : Equal (Bool.or Bool.true Bool.true) Bool.true
TestOrB4 = Equal.refl



// Exercise 3.0.1
Nandb (b1: Bool) (b2: Bool) : Bool
Nandb Bool.false b = Bool.true
Nandb Bool.true  b = Bool.not b

Test_nandb1 : Equal (Nandb Bool.true Bool.false) Bool.true
Test_nandb1 = Equal.refl

Test_nandb2 : Equal (Nandb Bool.false Bool.false) Bool.true
Test_nandb2 = Equal.refl

Test_nandb3 : Equal (Nandb Bool.false Bool.true) Bool.true
Test_nandb3 = Equal.refl

Test_nandb4 : Equal (Nandb Bool.true Bool.true) Bool.false
Test_nandb4 = Equal.refl



Andb3 (b1: Bool) (b2: Bool) (b3: Bool) : Bool
Andb3 Bool.true  b2 b3 = Bool.and b2 b3
Andb3 Bool.false b2 b3 = Bool.false

Test_andb31 : Equal (Andb3 Bool.true Bool.true Bool.true) Bool.true
Test_andb31 = Equal.refl

Test_andb32 : Equal (Andb3 Bool.false Bool.true Bool.true) Bool.false
Test_andb32 = Equal.refl

Test_andb33 : Equal (Andb3 Bool.true Bool.false Bool.true) Bool.false
Test_andb33 = Equal.refl

Test_andb34 : Equal (Andb3 Bool.true Bool.true Bool.false) Bool.false
Test_andb34 = Equal.refl



// 4. Function Types



// --------------------------
// 6. Numbers
// --------------------------

// Definição de Nat
Nat: Type
Nat.zero: Nat
Nat.succ (pred: Nat): Nat


Pred (n: Nat): Nat
Pred Nat.zero     = Nat.zero
Pred (Nat.succ a) = a

Minus_two (n: Nat) : Nat
Minus_two Nat.zero                = Nat.zero
Minus_two (Nat.succ Nat.zero)     = Nat.zero
Minus_two (Nat.succ (Nat.succ a)) = a

Evenb (n: Nat) : Bool
Evenb Nat.zero                = Bool.true
Evenb (Nat.succ Nat.zero)     = Bool.false
Evenb (Nat.succ (Nat.succ a)) = Evenb a

Oddb (n: Nat) : Bool
Oddb n = Bool.not (Evenb n)

TestOddb1 : Equal (Oddb (Nat.succ Nat.zero)) Bool.true
TestOddb1 = Equal.refl

TestOddb2 : Equal (Oddb (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero))))) Bool.false
TestOddb2 = Equal.refl

Plus (n: Nat) (m: Nat) : Nat
Plus Nat.zero     m = m
Plus (Nat.succ k) m = Nat.succ (Plus k m)

Mult (n: Nat) (m: Nat) : Nat
Mult Nat.zero     m = Nat.zero
Mult (Nat.succ k) m = Plus m (Mult k m)

TestMult1: (Equal (Mult (U60.to_nat 3) (U60.to_nat 3)) (U60.to_nat 9))
TestMult1 = Equal.refl

Minus (n: Nat) (m: Nat) : Nat
Minus Nat.zero     m            = Nat.zero
Minus n            Nat.zero     = n
Minus (Nat.succ k) (Nat.succ j) = Minus k j

Exp (base: Nat) (power: Nat) : Nat
Exp base Nat.zero     = Nat.succ Nat.zero
Exp base (Nat.succ k) = Mult base (Exp base k)


// 6.0.1. Exercise

Factorial (n: Nat) : Nat
Factorial Nat.zero     = Nat.succ Nat.zero
Factorial (Nat.succ k) = Mult (Nat.succ k) (Factorial k)

TestFactorial1 : Equal (Factorial (U60.to_nat 3)) (U60.to_nat 6)
TestFactorial1 = Equal.refl

TestFactorial2 : 
    (Equal 
        (Factorial (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero)))))
        (Mult 
            (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero))))))
            (Nat.succ (Nat.succ (Nat.succ (Nat.succ Nat.zero))))))
TestFactorial2 = Equal.refl


Nat.equal (n: Nat) (m: Nat) : Bool
Nat.equal Nat.zero     Nat.zero     = Bool.true
Nat.equal Nat.zero     (Nat.succ j) = Bool.false
Nat.equal (Nat.succ k) Nat.zero     = Bool.false
Nat.equal (Nat.succ k) (Nat.succ j) = Nat.equal k j

Lte (n: Nat) (m: Nat) : Bool
Lte Nat.zero     m            = Bool.true
Lte (Nat.succ k) Nat.zero     = Bool.false
Lte (Nat.succ k) (Nat.succ j) = Lte k j

TestLte1 : Equal (Lte (U60.to_nat 2) (U60.to_nat 2)) Bool.true
TestLte1 = Equal.refl

TestLte2 : Equal (Lte (U60.to_nat 2) (U60.to_nat 4)) Bool.true
TestLte2 = Equal.refl

TestLte3 : Equal (Lte (U60.to_nat 4) (U60.to_nat 2)) Bool.false
TestLte3 = Equal.refl



// 6.02 Exercises
// Blt_nat (n: Nat) (m: Nat) : Bool
// Blt_nat n m = ?

// Test_blt_nat_1 : Equal (Blt_nat (U60.to_nat 2) (U60.to_nat 2)) Bool.false
// Test_blt_nat_1 = ?

// Test_blt_nat_2 : Equal (Blt_nat (U60.to_nat 2) (U60.to_nat 4)) Bool.true
// Test_blt_nat_2 = ?

// Test_blt_nat_3 : Equal (Blt_nat (U60.to_nat 4) (U60.to_nat 2)) Bool.false
// Test_blt_nat_3 = ?


// --------------------------
// 7. Proof by simplification
// --------------------------

Plus_Z_n (n: Nat) : Equal (Plus Nat.zero n) n
Plus_Z_n n = Equal.refl

Plus_1_l (n: Nat) : Equal (Plus (Nat.succ Nat.zero) n) (Nat.succ n)
Plus_1_l n = Equal.refl

Mult_0_l (n: Nat) : Equal (Mult Nat.zero n) Nat.zero
Mult_0_l n = Equal.refl 

// Plus_n_Z (n: Nat) : Equal n (Plus n Nat.zero)
// Plus_n_Z n = Equal.refl

// --------------------------
// 8. Proof by rewriting
// --------------------------

Plus_id_example (n: Nat) (m: Nat) (e : Equal n m) : Equal (Plus n n) (Plus m m)
Plus_id_example n m e = Equal.rewrite e (x => Equal (Plus n n) (Plus x x)) Equal.refl

// 8.0.1
Plus_id_exercise (n: Nat) (m: Nat) (o: Nat) (e1: Equal n m) (e2: Equal m o) : Equal (Plus n m) (Plus m o)
Plus_id_exercise n m o e1 e2 = 
    let app = Equal.apply (x => Plus x m) e1
    Equal.rewrite e2 (x => Equal (Plus n m) (Plus m x)) app

Mult_0_plus (n: Nat) (m: Nat) : Equal (Mult (Plus Nat.zero n) m) (Mult n (Plus Nat.zero m))
Mult_0_plus n m = Equal.refl

// 8.0.2
Mult_S_1 (n: Nat) (m: Nat) (e: Equal m (Nat.succ n)) : Equal (Mult m (Plus (Nat.succ Nat.zero) n)) (Mult m m)
Mult_S_1 n m e =
    let app = Equal.apply (x => Mult m x) e
    Equal.mirror app

// --------------------------
// 9. Proof by case analysis
// --------------------------

Plus_1_neq_0 (n: Nat) : Equal (Nat.equal (Plus n (Nat.succ Nat.zero)) Nat.zero) Bool.false
Plus_1_neq_0 Nat.zero     = Equal.refl
Plus_1_neq_0 (Nat.succ k) = Equal.refl

Not_involutive (b: Bool) : Equal (Bool.not (Bool.not b)) b
Not_involutive Bool.false = Equal.refl
Not_involutive Bool.true  = Equal.refl

Andb_commutative (b: Bool) (c: Bool) : Equal (Bool.and b c) (Bool.and c b)
Andb_commutative Bool.true  Bool.true  = Equal.refl
Andb_commutative Bool.true  Bool.false = Equal.refl
Andb_commutative Bool.false Bool.true  = Equal.refl
Andb_commutative Bool.false Bool.false = Equal.refl

Andb_commutative_rhs_1 (c:Bool) : Equal c (Bool.and c Bool.true)
Andb_commutative_rhs_1 Bool.true  = Equal.refl
Andb_commutative_rhs_1 Bool.false = Equal.refl

Andb_commutative_rhs_2 (c:Bool) : Equal Bool.false (Bool.and c Bool.false)
Andb_commutative_rhs_2 Bool.true  = Equal.refl
Andb_commutative_rhs_2 Bool.false = Equal.refl

Andb_commutative_ (b: Bool) (c: Bool) : Equal (Bool.and b c) (Bool.and c b)
Andb_commutative_ Bool.true  c = Andb_commutative_rhs_1 c
Andb_commutative_ Bool.false c = Andb_commutative_rhs_2 c

// 9.0.1
Andb_true_elim_2 (b: Bool) (c: Bool) (e: Equal (Bool.and b c) Bool.true) : Equal c Bool.true
Andb_true_elim_2 Bool.true  c e = e
Andb_true_elim_2 Bool.false c e = Empty.absurd (Bool.true_not_false (Equal.mirror e))

//9.0.2
Zero_nbeq_plus_1 (n: Nat) : Equal (Nat.equal Nat.zero (Plus n (Nat.succ Nat.zero))) Bool.false
Zero_nbeq_plus_1 Nat.zero     = Equal.refl
Zero_nbeq_plus_1 (Nat.succ k) = Equal.refl


// --------------------------
// 11. More exercises
// --------------------------

// 11.0.1
// Identity_fn_applied_twice 
//     (f : Bool -> Bool) 
//     (e : [x : Bool] Equal (f x) x) 
//     (b : Bool) 
// : Equal (f (f b)) b

// 11.0.2
Andb_eq_orb (b: Bool) (c : Bool) (e: Equal (Bool.and b c) (Bool.or b c)) : Equal b c
Andb_eq_orb Bool.true c e = Equal.mirror e
Andb_eq_orb Bool.false c e = e

// 11.0.3
// TODO

